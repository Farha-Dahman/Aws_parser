"""
This script reads a text file generated by a point of sale system. 
It extracts various details from the file, such as receipt number, 
date, time, user, order number, etc .... The extracted data is 
organized into a dictionary to be converted to JSON format.

"""

def extract_data(file_contents):
    # Split the data by lines and return them as a list
    lines = file_contents.split('\n')
    return lines

def extract_info(line, keyword):
    # Strip the line and split it using ':'
    line = line.strip()
    parts = line.split(':')

    # Check if the keyword is in the line
    if keyword.lower() in parts[0].lower():
        # Return a dictionary with parts[0] as the key and parts[1] as the value
        return {parts[0].strip(): parts[1].strip()}

    return None

def extract_date(line):
    parts = line.strip().split()

    for part in parts:
        if '/' in part:
            return part
    return None

def extract_time(line):
    date_time = line.strip()
    parts = date_time.split()
    time = parts[1]  # extract the time part
    suffix = parts[2]  # extract the AM/PM
    return f"{time} {suffix}"

def extract_items(lines):
    # Iterate through the lines to extract items
    # Each item is a dictionary containing item name, price, quantity and total price
    items = []
    prev_item_name = None  # This to store the previous item name

    for line in lines:
        line = line.strip()
        if 'x' in line:
            parts = line.split('x')
            item_price_and_total = parts[1].split() # parts[1] contains the item price and the total price
            item_name = prev_item_name # Use the previous item name
            quantity = int(parts[0].strip()) # parts[0] contains the quantity of this item
            price = float(item_price_and_total[0].replace('$', ''))
            total_price = float(item_price_and_total[1].replace('$', ''))
            items.append({
                "Item_name": item_name,
                "Item_price": price,
                "Item_quantity": quantity,
                "Total_price": total_price
            })
        else:
            prev_item_name = line  # Update the previous item name

    return items

def parser_splitter(file_contents):
    # Initialize a dictionary to store the extracted info
    parsed_info = {}

    # Extract data as a separate lines
    lines = extract_data(file_contents)

    # Iterate over the lines and extract each detail
    for line in lines:
        # Check if the line contains '/' as date/time patterns
        if '/' in line:
            parsed_info.update({
                "Receipt Date": extract_date(line),
                "Receipt Time": extract_time(line)
            })
            continue

        for key in ["Receipt No", "Total", "User", "Order No", "Items count", "Cash", "Paid amount"]:
            extracted_info = extract_info(line, key)  # Extract info from current line
            if extracted_info: # If the key is found in this line, add the extracted info to the dictionary
                parsed_info.update(extracted_info)
                break

    # Extract items
    parsed_info.update({
        "Items": extract_items(lines),
    })

    return parsed_info